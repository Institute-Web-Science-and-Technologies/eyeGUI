At the moment:
- Why does it crash at the end (test it with Visual Debugger...)

### VERSION 0.2 [Text and floating elements] ### (ready for "Praktikum")
- Create empty default font to catch any null pointer
- Create helper for de- and increasing of all values like alpha etc
- Text rendering using freetype
  - Integrate into AssetManager
    - Something more low level for later text input
      - Something like: bindFontAtlas and get glyph or so
- New elements using text rendering (for the start: textbox and some button? later menu stuff...)
- Localization using files
- Changing styles through programming interface
- HelloEyeGUI and eyeGUIDemo refactoring..
- Sensor: instead of real values for penetration: maybe acceleration would be a good idea
- Maybe make job queue in GUI to enable notification to move layouts
- BoxButton: enable stretched icons
- Overwork CMakeLists! Probably, unecessary sourcing instead of including
- Notification into own class and layout as const pointer in elements
- Add version / date of externals
  - reintegrate glm (some files may be missing)
- Uniform locations of texture slots not used! (may be problem if there is more than one in use at once)

### VERSION 0.3 [Input] ### (ready for eye browser)
- New style member: FadeColorMutliplier (used when gaze is not upon the the element)
- More complex input structure and configuration
  - Mouse
  - Keyboard
  - Eyetracker
  - Brain-computer-interface
  - Buttons?
  - Other...
- More complex elements with text
- Text input
- AdaptiveRelativeScale: Increase it when gaze is upon the element (recursive resizing necessary) or patient gets sleepy

### VERSION 0.4 ### (improvements)
- Audio

Notes:
- Determine maximum texture resolution and create more than one texture atlas for font rendering if necessary
	- Save texture id in glyph.. (already done :))
- Element's mBorderAspectRatio for avoiding borders to kill aspect ratio only used in picture at the moment
- maybe switch to double to accumulate time. otherwise, every half hour there will be flickering
- Reminder: Parser responsible for value ranges!
- Precaching of textures (maybe write something to an text file)
- Event functions, which return boolean telling whether input was processed (mouse, keyboard...eye? brain...? multitouch) -> how to make flexible -> using transferobject?
- Maybe use sampler states for textures instead of per texture settings
- Reminder: XML may not contain information about current state (activity, hiding etc!!!)
- Rasterization of SVGs are depending on DPI at the moment
- No mixing of buttons / sensors and text. Text should be never penetrateable by gaze (but maybe clickable)
- Strange or hacky: Since OGL functions are loaded already by the library, what happens in the main program doing the same? Seems to work at least...
- Stack
  - Non used pixels should be better shared among all elements not only the head in stack -> very difficult stuff
- Reminder: Namespaces easier because Layout and GUI is visible to outer space
- Mapping of images / icons would be cool (easy exchange in whole application) (path without .png or .svg is interperted as mapping)
- Input
  - Reminder: can be NULL if irrelevant for Element
  - At the moment: everything taking place in specialUpdate
  - Maybe blocks have an option: kill or not kill input (both possible)
  - is selecting via keyboard input? (at the moment it is not blocked if input is disabled for layout)
- Text
	- Tab like button with text (ok, however I decided to make no sensitive area with text...)
	- Menu
		- Should have look field for activation -> this field could be box / circle button with icon :)
	- Tooltips
	- Make listening elements (analog to notifier template) using pointer, function or method getter to get values like floats or strings for displaying
- If one wants to add brick more than one time: id replacement at loading

If bored:
- Some members of element could be private but getters necessary..
